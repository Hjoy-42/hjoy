http协议：全称Hyper Text Transfer Protocol 超文本传输协议。位于TCP/IP模型当中的应用层
  通过请求和响应的方式，在客户端和服务端进行通信
  不安全
  明文传输
  
  client -------------------------server
  |     date            黑客          |   黑客在此时拦截，把客户端的数据偷取，造成数据不安全
  |  ---------------------------->    |
  |                                   |
  |  <----------------------------    
  |                                   |


https协议
  1.对称加密
    客户端通过加密算法f1（K,date）= c_date  此时不再进行明文传输，而是通过此算法，把date进行密文传输c_date
    服务端通过加密算法f2（c_date,K）=date   服务端接收到服务端发出的密文c_date，再通过算法得到客户端的date
    
    缺点1：
    客户端和服务端都有一个K密钥,共享的
    如果有100000个客户端，每个客户端都有一个 K ，那么服务端就需要存储100000个 K 。这显然是不现实的
    
    缺点2：
    client -------------------------server
  |     c_date                        |  c_date
  |  ---------------------------->    |
  |  date                                 |
  |  <----------------------------    | c_date
  |                          黑客     |
  
  因为黑客通常伪装成客户端，服务端的 K 只有一个，客户端也可以获取
  黑客在此时进行拦截，则把服务端传输给客户端的数据  获取了，又造成了数据不安全
  
  
  2.非对称加密（有公钥可以通过算法得出私钥加密的数据，私钥也可以通过算法得到公钥加密的数据）
    服务端有一个私钥和公钥，私钥只有服务器拥有
      1>客户端向服务端发送一个请求，服务端把自己的公钥发给客户端
      2>客户都通过公钥把自己的数据加密发给服务端，服务端再通过私钥把加密的数据解密得到客户端发送的数据
      3>但是此时服务端再通过私钥加密把信息发送给服务器时，黑客介入，通过相同的公钥获取服务端的数据，造成数据不安全
      
   client -------------------------server
  |      请求                         |  
  |  ---------------------------->    |
  |            公钥                    |
  |  <----------------------------    | 
  |   公钥加密的数据                   |
  |  ---------------------------- >   | 
  |              私钥加密的数据         |
  |  <----------------------------    | 
  |                    黑客介入        |
  
  
  3.非对称加密+对称加密（非对称加密获取随机数num当作 密钥，再把num当作密钥通过对称加密进行信息传输）
     1>客户端向服务端发送请求，服务端发送自己的公钥给客户端
     2>客户端通过公钥算法加密自己的num得到一个Y，发送给服务端，服务端通过自己的私钥算法解密得到num
     3>服务端再向客户端发送OK,  此时客户端和服务端达成共识————他们之间的密钥为num
     4>接下来通过对称加密，把num当作密钥进行算法的数据传输
     5>但是存在中间人问题
      1.黑客在第一时间，即客户端发送请求就介入，自己也有一套私钥sk1和公钥pk1,接收请求，把自己的公钥pk1发给客户端
      2.收到请求后，也向服务端发送请求，收到服务端的公钥    pk
      3.客户端误以为收到了服务端的  pk ，就继续发送根据 pk1 加密的 num ，此时黑客通过自己的私钥 sk1 获取到 num。
        然后通过他已经获取到的服务端的公钥 pk 对 num 进行加密，发送给服务端，服务端正常通过，发送OK给黑客
      4.黑客也发送OK给客户端，然后充当好人，帮他们进行传输
      5.接下来的过程客户端和服务端发送出去的所有信息黑客都可以获取，然后造成信息的不安全
  
  4.非对称加密+对称加密+CA机构+hash算法
     CA机构有自己的公钥 CPK 和私钥 CSK                                                               （此时收费）
     1> 客户端发送请求给服务端，得到的不是服务端的PK，而是通过 CA 机构的 CSK 去加密 PK 然后发给服务端一个证书----License
     2> 服务端把证书 License 发送给客户端，然后进行验证。验证成功就通过
     3> 客户端通过自己的操作系统中的 CA 机构的 CPK 对 License 进行解密，得到了 PK
     4> 然后客户都安再通过 PK 加密自己的 num 发送给服务端，此时如果黑客拦截，得到的加密信息他是没有私钥的，没办法进行解密
     
    
  
  
  
  
  
  
  
  
    
